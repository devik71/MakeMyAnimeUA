#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª—å–Ω–∏–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º
"""

import json
import subprocess
import sys
from pathlib import Path

def test_pipeline_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª—å–Ω–∏–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º"""
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª—å–Ω–∏–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ñ—ñ–≥
    test_config = {
        "session_id": "test_session_123",
        "video_path": "input/test_video.mp4",  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        "output_dir": "output",
        "temp_dir": "temp_audio",
        "translation_engine": "helsinki",
        "source_language": "ru",
        "target_language": "uk",
        "whisper_model": "base",
        "use_gpu": False,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CPU –¥–ª—è —Ç–µ—Å—Ç—É
        "subtitle_style": "magi_pipeline/ass_generator_module/styles/Dialogue.ass",
        "source_type": "transcribe",
        "web_interface": True
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥
    config_path = Path("temp_audio/test_config.json")
    config_path.parent.mkdir(exist_ok=True)
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(test_config, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {config_path}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω—É –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    try:
        cmd = [
            sys.executable,
            "scripts/run_pipeline.py",
            "--config", str(config_path),
            "--session", "test_session_123",
            "--status", "temp_audio/test_status.json"
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–∏: {' '.join(cmd)}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞–π–ø–ª–∞–π–Ω (–±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É)
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        import time
        time.sleep(3)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ü–µ—Å —â–µ –ø—Ä–∞—Ü—é—î
        if process.poll() is None:
            print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å-—Ñ–∞–π–ª
            status_path = Path("temp_audio/test_status.json")
            if status_path.exists():
                with open(status_path, 'r', encoding='utf-8') as f:
                    status = json.load(f)
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            else:
                print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å-—Ñ–∞–π–ª —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å –¥–ª—è —Ç–µ—Å—Ç—É
            process.terminate()
            process.wait(timeout=5)
            print("üõë –ü–∞–π–ø–ª–∞–π–Ω –∑—É–ø–∏–Ω–µ–Ω–æ (—Ç–µ—Å—Ç)")
            
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é:")
            print(f"STDOUT: {stdout}")
            print(f"STDERR: {stderr}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    
    # –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
    try:
        if config_path.exists():
            config_path.unlink()
        status_path = Path("temp_audio/test_status.json")
        if status_path.exists():
            status_path.unlink()
        print("üßπ –¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –æ—á–∏—â–µ–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")

def test_helsinki_import():
    """–¢–µ—Å—Ç—É—î —ñ–º–ø–æ—Ä—Ç Helsinki-NLP"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É Helsinki-NLP")
    
    try:
        from magi_pipeline.translate.translate import translate_line
        print("‚úÖ –ú–æ–¥—É–ª—å translate —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥
        test_text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
        try:
            result = translate_line(test_text)
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥: '{test_text}' -> '{result}'")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
            
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    print("üé¨ MakeMyAnimeUA - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó")
    print("=" * 50)
    
    test_helsinki_import()
    test_pipeline_integration()
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 